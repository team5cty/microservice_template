package handlers

import (
	"encoding/json"
	"io"
	"net/http"
	"fmt"
	"context"
	{{- if hasPathParam .endpoint.Path}}
	"github.com/gorilla/mux"
	{{- end}}
	"{{.module}}/prisma"
	"{{.module}}/prisma/db"
)

type {{.endpoint.Name}} struct {
	{{- range $key, $value := .endpoint.Json.Properties}}
	{{title $key}} {{$value}}   `json:"{{$key}}"` 
	{{- end}}
}

{{if .endpoint.Json.Type | isList}}
type {{.endpoint.Name}}_list []*{{.endpoint.Name}}
{{- end}}

{{if .endpoint.Method|isGET}}
func ({{.endpoint.Name | tolower}} *{{.endpoint.Name}}{{if .endpoint.Json.Type | isList}}_list{{end}}) ToJSON(w io.Writer) error {
	e:= json.NewEncoder(w)
	return e.Encode({{.endpoint.Name | tolower}})
}
{{- end}}

{{- if .endpoint.Method|isPOST}}
func ({{.endpoint.Name | tolower}} *{{.endpoint.Name}}{{if .endpoint.Json.Type | isList}}_list{{end}}) FromJSON(r io.Reader) error {
	d:= json.NewDecoder(r)
	return d.Decode({{.endpoint.Name | tolower}})
}
{{- end}}

func {{.endpoint.Method}}_{{.endpoint.Name}}_Handler (w http.ResponseWriter, r *http.Request) {
	//w.Header().Set("Content-Type", "application/json")
	client := prisma.NewClient() // Initialize Prisma client
	ctx := context.Background()
	defer client.Disconnect()  

	{{- if .endpoint.Json.Type | isList}}
	var {{tolower .endpoint.Name}} {{.endpoint.Name}}_list
		{{if .endpoint.Method | isGET}}
				{{if not .endpoint.Json.Properties}}
					res, err := client.{{.endpoint.Table}}.FindMany()
					if err != nil {
						http.Error(w, err.Error(), http.StatusInternalServerError)
						return
					}
					for _, object := range res {
						ele := &{{.endpoint.Name}}{
							{{- range $key, $value := .endpoint.Json.Properties}}
							{{title $key}}: object.{{$value}}
							{{- end}}
						}
						{{tolower .endpoint.Name}} = append({{tolower .endpoint.Name}}, ele)
					}
					{{tolower .endpoint.Name}}.ToJSON(w)
				{{else}}
					//Implement logic for {{.endpoint.Method}} {{.endpoint.Path}}
				{{end}}
		{{end}}
	{{else}}
		var {{tolower .endpoint.Name}} {{.endpoint.Name}}
		{{if (.endpoint.Method | isGET)}}
			{{if not .endpoint.Json.Properties}}
				var params map[string]string = mux.Vars(r) //access dynamic variables from this map.
				id, ok := params["id"]
				if !ok {
					http.Error(w, "ID parameter not found in the path", http.StatusBadRequest)
					return
				}
				res, err := client.{{.endpoint.Table}}.FindUnique(db.{{.endpoint.Table}}.id.Equals(id)).Exec(ctx)
				if err != nil {
					http.Error(w, err.Error(), http.StatusInternalServerError)
					return
				}
				{{tolower .endpoint.Name}} = {
					{{- range $key, $value := .endpoint.Json.Properties}}
					{{title $key}}: res.{{$value}}
					{{- end}}
				}
				{{tolower .endpoint.Name}}.ToJSON(w)
	        {{end}}
		{{end}}
	{{end}}
}